{% layout "layout.liquid" %}
{% block content %}
<div id="boxPlot"></div>
<style>
    .myYaxis {
        font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
    }

    .myXaxis {
        font-size: 1.1rem;
        font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
    }

    #boxPlot {
        background-color: white;
        border-radius: .4rem;
        margin: 3rem;
        width: 60%;
    }

    .tooltip {
        position: absolute;
    }
</style>

<script src="https://d3js.org/d3.v4.js"></script>





<script>
    // For example purposes, for sorting through hefty data utilize rollup and 
    // quantile for box plots
    var tooltip = d3.select("#boxPlot")
        .append("div")
        .style("opacity", 0)
        .attr("class", "tooltip")
        .style("background-color", "white")
        .style("border", "solid")
        .style("border-width", ".1rem")
        .style("border-radius", ".5rem")
        .style("padding", "1rem")

    var margin = { top: 10, right: 30, bottom: 30, left: 40 },
        width = 460 - margin.left - margin.right,
        height = 400 - margin.top - margin.bottom;

    var svg = d3.select("#boxPlot")
        .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")");


    d3.csv("https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/iris.csv", function (data) {
        // Link to understanding roll ups more 
        //https://observablehq.com/@d3/d3-group
        var sumstat = d3.nest()
            .key(function (d) { return d.Species; })
            .rollup(function (d) {
                q1 = d3.quantile(d.map(function (g) { return g.Sepal_Length; }).sort(d3.ascending), .25)
                median = d3.quantile(d.map(function (g) { return g.Sepal_Length; }).sort(d3.ascending), .5)
                q3 = d3.quantile(d.map(function (g) { return g.Sepal_Length; }).sort(d3.ascending), .75)
                interQuantileRange = q3 - q1
                min = q1 - 1.5 * interQuantileRange
                max = q3 + 1.5 * interQuantileRange
                return ({ q1: q1, median: median, q3: q3, interQuantileRange: interQuantileRange, min: min, max: max })
            })
            .entries(data)

        var x = d3.scaleBand()
            .range([0, width])
            .domain(["setosa", "versicolor", "virginica"])
            .paddingInner(1)
            .paddingOuter(.5)
        svg.append("g")
            .attr("transform", "translate(0," + height + ")")
            .attr("class", "myXaxis")
            .call(d3.axisBottom(x))

        var y = d3.scaleLinear()
            .domain([3, 9])
            .range([height, 0])
        svg.append("g").call(d3.axisLeft(y))
            .attr("class", "myYaxis")

        svg
            .selectAll("vertLines")
            .data(sumstat)
            .enter()
            .append("line")
            .attr("x1", function (d) { return (x(d.key)) })
            .attr("x2", function (d) { return (x(d.key)) })
            .attr("y1", function (d) { return (y(d.value.min)) })
            .attr("y2", function (d) { return (y(d.value.max)) })
            .attr("stroke", "black")
            .attr("stroke-width", 2)
            .style("width", 40)

        var boxWidth = 50
        svg
            .selectAll("boxes")
            .data(sumstat)
            .enter()
            .append("rect")
            .attr("x", function (d) { return (x(d.key) - boxWidth / 2) })
            .attr("y", function (d) { return (y(d.value.q3)) })
            .attr("height", function (d) { return (y(d.value.q1) - y(d.value.q3)) })
            .attr("width", boxWidth)
            .attr("stroke", "black")
            .attr("stroke-width", 2)
            .style("fill", "#917EF5")

        svg
            .selectAll("medianLines")
            .data(sumstat)
            .enter()
            .append("line")
            .attr("x1", function (d) { return (x(d.key) - boxWidth / 2) })
            .attr("x2", function (d) { return (x(d.key) + boxWidth / 2) })
            .attr("y1", function (d) { return (y(d.value.median)) })
            .attr("y2", function (d) { return (y(d.value.median)) })
            .attr("stroke", "black")
            .attr("stroke-width", 2)
            .style("width", 80)
    })

</script>

{% endblock %}